{"version":3,"sources":["Components/SearchBox.js","Components/Card.js","Components/Spinner.js","Containers/BooksContainer.js","App.js","serviceWorker.js","index.js","Assets/Images/noImg.png"],"names":["FormContainer","styled","div","_templateObject","SearchBox","react_default","a","createElement","Form","onSubmit","this","props","submitHandler","TextInput","placeholder","onChange","changeHandler","Button","style","marginTop","type","primary","label","Component","CardContainer","Card_templateObject","CoverImg","img","_templateObject2","InfoPane","_templateObject3","Card","src","imgSrc","alt","title","authors","publisher","href","link","loadanim","keyframes","Spinner_templateObject","StyledSpinner","Spinner_templateObject2","Spinner","children","ContainerDiv","BooksContainer_templateObject","BooksContainer","display","loading","Components_Spinner","bookData","map","book","idx","bookInfo","volumeInfo","Components_Card","key","id","imageLinks","thumbnail","noImg","join","previewLink","err","theme","global","font","family","size","height","MainWindow","App_templateObject","App","state","searchQuery","inputChangeHandler","e","_this","setState","target","value","axios","get","params","q","then","res","data","items","catch","_this2","Grommet","Components_SearchBox","Containers_BooksContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.e916f6c8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Form, TextInput, Button } from \"grommet\";\n\nconst FormContainer = styled.div`\n    margin: 2rem;\n    width: 50%;\n    text-align: center;\n    align-self: center;\n`\n\nclass SearchBox extends Component {\n\n    render() {\n        return (\n            <FormContainer>\n                <Form onSubmit={this.props.submitHandler}>\n                    <div>\n                        <TextInput\n                            placeholder=\"Search by Title or Author\"\n                            onChange={this.props.changeHandler}\n                        />\n                        <Button style={{marginTop: \"1rem\"}} type=\"submit\" primary label=\"Search\"/>\n                    </div>\n                </Form>\n            </FormContainer>\n        )\n    }\n}\n\nexport default SearchBox;\n","import React from 'react';\nimport styled from 'styled-components';\n// import { Button } from 'grommet';\n\nconst CardContainer = styled.div`\n    font-size: 0.9rem;\n    margin: 20px;\n    background-color: white;\n    border-radius: 10px;\n    display: grid;\n    grid-template-columns: 128px 1fr;\n    grid-template-rows: 1fr;\n    width: 400px;\n    height: 208px;\n    padding: 20px;\n    overflow: visible;\n    box-sizing: border-box;\n    box-shadow: 2px 2px 18px -1px rgba(191,191,191,1);\n\n    @media(max-width: 375px) {\n        width: 350px;\n        font-size: 0.6rem;\n    }\n`\n\nconst CoverImg = styled.img`\n    margin-top: -40px;\n    /* grid-row: 1 / span 2; */\n    grid-column: 1 / span 1;\n    display: block;\n    width: 128px;\n    height: 198px;\n    box-shadow: 2px 2px 18px -1px rgba(191,191,191,1);\n`\n\nconst InfoPane = styled.div`\n    /* width: 100%; */\n    /* grid-row: 1 / span 2; */\n    padding-left: 20px;\n    grid-column: 2 / span 1;\n`\n\nconst Card = props => {\n    return (\n        <CardContainer>\n            <CoverImg src={props.imgSrc} alt={props.title}/>\n            <InfoPane>\n                <h3>{props.title}</h3>\n                <p>By: {props.authors}</p>\n                <p>Publisher: {props.publisher}</p>\n                <a href={props.link}>More Info</a>\n            </InfoPane>\n        </CardContainer>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst loadanim = keyframes`\n    from { transform: rotate(0deg)}\n    to {transform: rotate(360deg)}\n`\n\nconst StyledSpinner = styled.div`\n    color: #0dc5c1;\n    border-radius: 50%;\n    font-size: 11px;\n    text-indent: -99999em;\n    margin: 55px auto;\n    position: relative;\n    width: 10em;\n    height: 10em;\n    box-shadow: inset 0 0 0 1em;\n    transform: translateZ(0);\n    &:before, &:after {\n        position: absolute;\n        content: '';\n    }\n    &:before {\n        width: 5.2em;\n        height: 10.2em;\n        background: #f7f7f7;\n        border-radius: 10.2em 0 0 10.2em;\n        top: -0.1em;\n        left: -0.1em;\n        transform-origin: 5.2em 5.1em;\n        animation: ${loadanim} 2s infinite ease 1.5s;\n    }\n    &:after {\n        width: 5.2em;\n        height: 10.2em;\n        background: #f7f7f7;\n        border-radius: 0 10.2em 10.2em 0;\n        top: -0.1em;\n        left: 5.1em;\n        transform-origin: 0px 5.1em;\n        animation: ${loadanim} 2s infinite ease;\n    }\n    `\n\nconst Spinner = props => (\n    <StyledSpinner>{props.children}</StyledSpinner>\n    );\n    \n\nexport default Spinner;","import React from 'react';\nimport styled from 'styled-components';\nimport Card from '../Components/Card';\nimport Spinner from '../Components/Spinner';\nimport noImg from '../Assets/Images/noImg.png';\n\nconst ContainerDiv = styled.div`\n    display: flex;\n    flex-flow: row;\n    flex-wrap: wrap;\n    max-width: 1000px;\n    justify-content: center;\n`\n\nconst BooksContainer = props => {\n\n    let display = null;\n    if (props.loading) {\n        display = <Spinner />\n    } else if (props.bookData) {\n        display = props.bookData.map((book, idx) => {\n            const bookInfo = book.volumeInfo;\n            return (\n                <Card\n                    key={book.id}\n                    imgSrc={bookInfo.imageLinks? bookInfo.imageLinks.thumbnail: noImg}\n                    title={bookInfo.title}\n                    authors={bookInfo.authors.join(', ')}\n                    publisher={bookInfo.publisher}\n                    link={bookInfo.previewLink}\n                />\n            )\n        })\n    } else if (props.err) {\n        display = <h3>Unable to Fetch Book Data</h3>\n    }\n\n    return (\n        <ContainerDiv>\n            {display}\n        </ContainerDiv>\n    )\n}\n\nexport default BooksContainer;\n","import React, { Component } from \"react\";\nimport { Grommet } from \"grommet\";\nimport styled from \"styled-components\";\n// import logo from \"./logo.svg\";\n// import \"./App.css\";\n// import MainPage from './Containers/MainPage';\nimport SearchBox from './Components/SearchBox';\nimport axios from 'axios';\nimport BooksContainer from \"./Containers/BooksContainer\";\n\n\nconst theme = {\n    global: {\n        font: {\n            family: \"Montserrat\",\n            size: \"14px\",\n            height: \"20px\"\n        }\n    }\n};\n\nconst MainWindow = styled.div`\n    display: flex;\n    flex-flow: column;\n    width: 100%;\n    height: 100vh;\n    justify-content: flex-start;\n    align-items: center;\n`\n\nclass App extends Component {\n\n    state = {\n        searchQuery: '',\n        bookData: null,\n        err: null,\n        loading: false\n    }\n\n    inputChangeHandler = e => {\n        this.setState({searchQuery: e.target.value})\n    }\n\n    submitHandler = () => {\n        this.setState({loading: true})\n        axios.get('https://www.googleapis.com/books/v1/volumes', {\n            params: {\n                q: this.state.searchQuery\n            }\n        })\n        .then(res => this.setState({bookData: res.data.items, loading: false}))\n        .catch(err => this.setState({err: err, loading: false}))\n    }\n\n    render() {\n        return (\n            <Grommet theme={theme}>\n                <MainWindow>\n                    <h1 >Book Finder</h1>\n                    <SearchBox\n                        changeHandler={e => this.inputChangeHandler(e)}\n                        submitHandler={this.submitHandler}\n                    />\n                    <BooksContainer {...this.state}/>\n                </MainWindow>\n            </Grommet>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/noImg.ec6ec063.png\";"],"sourceRoot":""}